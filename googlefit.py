# -*- coding: utf-8 -*-
"""googleFit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sgr08KrKQ-aQMvmxnXMGpFGRxvMqF8Fd
"""
import os
import pickle
from google_auth_oauthlib.flow import Flow
from googleapiclient.discovery import build
from google.auth.transport.requests import Request

SCOPES = ['https://www.googleapis.com/auth/fitness.activity.read']
CREDENTIALS_FILE = './client_secrets.json'
TOKEN_FILE = 'token.pkl'  # file to save access/refresh tokens

credentials = None

# Load saved credentials if they exist
if os.path.exists(TOKEN_FILE):
    with open(TOKEN_FILE, 'rb') as token:
        credentials = pickle.load(token)

# If no valid credentials, run OAuth flow
if not credentials or not credentials.valid:
    if credentials and credentials.expired and credentials.refresh_token:
        # Refresh expired credentials
        credentials.refresh(Request())
    else:
        flow = Flow.from_client_secrets_file(CREDENTIALS_FILE, scopes=SCOPES)
        flow.redirect_uri = 'urn:ietf:wg:oauth:2.0:oob'
        auth_url, _ = flow.authorization_url(access_type='offline', include_granted_scopes='true')
        print('Go to this URL and authorize access:')
        print(auth_url)
        code = input('Enter the authorization code: ')
        flow.fetch_token(code=code)
        credentials = flow.credentials

    # Save the credentials for the next run
    with open(TOKEN_FILE, 'wb') as token:
        pickle.dump(credentials, token)

# Build the Google Fit API service
service = build('fitness', 'v1', credentials=credentials)
print('OAuth credentials set up successfully.')

import datetime
from datetime import timedelta

# Define the data source for step counts.
# This is a commonly used data source for steps from various fitness apps.
STEP_DATA_SOURCE = "derived:com.google.step_count.delta:com.google.android.gms:estimated_steps"

# Define the time range for fetching data (e.g., the last 7 days).
end_time = datetime.datetime.now()
start_time = end_time - datetime.timedelta(days=7)

# Convert timestamps to nanoseconds, which is required by the Google Fit API.
start_time_ns = int(start_time.timestamp() * 1e9)
end_time_ns = int(end_time.timestamp() * 1e9)

# Fetch the step data from the Google Fit API.
results = service.users().dataSources().datasets().get(
    userId='me',
    dataSourceId=STEP_DATA_SOURCE,
    datasetId=f'{start_time_ns}-{end_time_ns}'
).execute()

# Print the fetched data.
print(f"Step data for the last 7 days:")
# The data is typically in 'point' field, each point has a 'value' field
# and 'startTimeNanos' and 'endTimeNanos'.

dtArr = []
stepsArr = []

if 'point' in results:
    for point in results['point']:
        start_time_point = datetime.datetime.fromtimestamp(int(point['startTimeNanos']) / 1e9).replace(microsecond=0)
        end_time_point = datetime.datetime.fromtimestamp(int(point['endTimeNanos']) / 1e9).replace(microsecond=0) 
        step_count = point['value'][0]['intVal']
        print(f"  From {start_time_point} to {end_time_point}: {step_count} steps")
        dtArr.append(start_time_point)
        stepsArr.append(step_count)
else:
    print("No step data found for the specified time range.")

dtArr

import pandas as pd
df = pd.DataFrame()

df['Datetime'] = dtArr

df['Year'] = df['Datetime'].dt.year
df['Month'] = df['Datetime'].dt.month
df['Day'] = df['Datetime'].dt.day
df['Hour'] = df['Datetime'].dt.hour
df['Minute'] = df['Datetime'].dt.minute
df['Week'] = df['Datetime'].dt.isocalendar().week
df['Day of week'] = df['Datetime'].dt.strftime("%A")
# /////////Adding steps//////////////
df['Steps'] = stepsArr


df.groupby(['Month','Day'])['Steps'].sum()

# ///////// Datetime is stored in UTC///////////

dfGroupM = df.groupby(['Month'])['Steps'].sum()
dfGroupW = df.groupby(['Week'])['Steps'].sum()
dfGroupD = df.groupby(['Day'])['Steps'].sum()


day_steps = dfGroupD.iloc[-1]
week_steps = dfGroupW.iloc[-1]
month_steps = dfGroupM.iloc[-1]

# Create a friendly message
message = (
    f"Hey! ðŸ‘Ÿ Here's your step summary:\n\n"
    f"ðŸ“… Today ({df['Datetime'].dt.date.iloc[-1]}): {day_steps:,} steps\n"
    f"ðŸ“… This Week: {week_steps:,} steps\n"
    f"ðŸ“† This Month ({df['Datetime'].dt.strftime('%b').iloc[-1]}): {month_steps:,} steps\n\n"
    "Keep moving and stay healthy! ðŸ’ª"
)

print(message)
# # #Code for sending msg to whatsapp
# import pywhatkit

# pywhatkit.sendwhatmsg_instantly("+918779010059", message)

